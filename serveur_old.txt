const express = require('express');
const app = express();
const port = 3000 || process.env.PORT;
const Web3 = require('web3');
const truffle_connect = require('./connection/app.js');
const bodyParser = require('body-parser');
const { exec } = require("child_process");
const fs = require('fs');
const IPFS = require("ipfs-api")
const ipfs=new IPFS({host:"ipfs.infura.io",port:5001,protocol:"https"});

const https = require('https');
// parse application/x-www-form-urlencoded
///
app.set("views","./public_static")
app.set("view engine","ejs")

app.get('/a',(req,res)=>{
  res.render("test",{"anis":"anis"});
})

var session = require("express-session");
app.use(session({ secret: 'keyboard cat', resave: false, saveUninitialized: true}))

app.use(bodyParser.urlencoded({ extended: false }));

// parse application/json
app.use(bodyParser.json());


function VerifieUser(req,res){
  truffle_connect.VerifieUser(req.session.email,req.session.password,(balance) => {
    if(balance==false){ res.redirect("/login")}
  });
}

app.get('/',(req,res)=>{
  VerifieUser(req,res);
  res.sendFile(__dirname+"/public_static/index.html")
})
app.get('/login',(req,res)=>{
  res.sendFile(__dirname+"/public_static/login.html")
}
)

app.get('/DossierPatient/:id', (req, res) => {
  res.render("test",{"anis":req.params.id})
});
app.use(express.static('public_static'));


app.get('/save/:email/:password', (req, res) => {
  console.log("**** GET /saveVal ****");
  truffle_connect.sendUser(/*req.params.nom,req.params.prenom,req.params.adresse,req.params.telephone,*/req.params.email,req.params.password,(balance) => {  
    res.send(balance);
  });
 /* exec("cpabe-setup", (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        
        return;
    } 
    var PK,MK;

    let readablestream = fs.createReadStream("pub_key");
    readablestream.on('readable', () => {
      let pubkey = readablestream.read();
      PK=pubkey;
      if (pubkey) {
        ipfs.files.add(pubkey, function(err, pubkey_result) {
          if (err) {
            res.json('err');
            console.log(err);
          }
          let master_key_stream = fs.createReadStream("master_key");
          master_key_stream.on('readable', () => {
            let master_key = master_key_stream.read();
            if (master_key) {
              ipfs.files.add(master_key, function(err, masterkey_result) {
                if (err) {
                  res.json('err');
                  console.log(err);
                }
                console.log(pubkey_result);
                console.log(masterkey_result);
                truffle_connect.sendUser(/*req.params.nom,req.params.prenom,req.params.adresse,req.params.telephone,req.params.email,req.params.password,pubkey_result[0]["hash"],masterkey_result[0]["hash"],(balance) => {  
                  res.send(balance);
                });
          
              });
            }
          });
        });
      }
    });
});*/



});

app.post('/get', (req, res) => {
  console.log("**** GET /saveVal ****");
  // methode get req.query.val
  truffle_connect.VerifieUser(req.body.email,req.body.password,(balance) => {
    console.log(balance[0])
    console.log(balance[1].c[0]+"")
    if(balance[0]==true){
      req.session.user_id=balance[1].c[0]+"";
      req.session.email=req.body.email;
      req.session.password=req.body.password;
    }
    res.send(balance)
  });
});

app.get('/Profile', (req, res) => {
 VerifieUser(req,res);
  // res.sendFile(__dirname+"/public_static/Profile.html")
  truffle_connect.GetUser(req.session.user_id,(balance) => {
    console.log(balance)
    res.render("Profile",{"profile":balance})
  });
});

app.get('/Dossier', (req, res) => {
  VerifieUser(req,res);
  res.sendFile(__dirname+"/public_static/Dossier.html")
 });

app.get('/DossierJson', (req, res) => {
  truffle_connect.GetAllDossier(req.session.user_id,(result) => {
    res.send(result)
  });
});
app.post('/CreateDossier', (req, res) => {
  
  fs.writeFile('dossier.txt', "anis", err => {
    if (err) {
      console.error(err)
      return
    }
    exec("cpabe-enc pub_key dossier.txt '"+req.body.politique+"'", (error, stdout, stderr) => {
      if (error) {
          console.log(`error: ${error.message}`);
          return;
      }
      
      if (stderr) {
          console.log(`stderr: ${stderr}`);
          
          return;
      } 
      let readablestream = fs.createReadStream("dossier.txt.cpabe");
      readablestream.on('readable', () => {
      let result = readablestream.read();
      if (result) {
        ipfs.files.add(result, function(err, files) {
          if (err) {
            res.json('err');
            console.log(err);
          }
          truffle_connect.setUserDossier(req.session.user_id,files[0]["hash"],req.body.politique,(balance) => {
            console.log(files);
            res.send(balance)
          });
        });
      }
      });
    });
  })

});


app.get('/GetDossier/:dossier_id', (req, res) => {
  truffle_connect.GetUserDossier(req.session.user_id,req.params.dossier_id,(result) => {
    //console.log(balance[1])
    const file = fs.createWriteStream("dossier.txt.cpabe");
    https.get("https://ipfs.infura.io/ipfs/"+result[1], function(response) {
      response.pipe(file);     
    });
    exec("cpabe-dec pub_key a_private_key  dossier.txt.cpabe", (error, stdout, stderr) => {
      if (error) {
          console.log(`error: ${error.message}`);
          res.send("error cpabe-dec" )
    
          res.send("error");
      }
      if (stderr) {
          console.log(`stderr: ${stderr}`);
          
          res.send("error"); 
      }
      res.send("dossier_0")
      }); 

  });
});

app.get('/s/:text', (req, res) => {
  //https://ipfs.infura.io/ipfs/QmbgaVamYaBUnxYnpYN83jX5Ee9B8sDgbAUKZ9yMbgT4RN
  /*const file = fs.createWriteStream("pppppp");
  const request = https.get("https://ipfs.infura.io/ipfs/QmbgaVamYaBUnxYnpYN83jX5Ee9B8sDgbAUKZ9yMbgT4RN", function(response) {
    response.pipe(file);
    res.send("ok")
  });*/
  /*truffle_connect.setUserDossier(0,"hash",'patient',(balance) => {
    res.send(balance)
  });*/
  fs.writeFile('dossier.txt', req.params.text, err => {
    if (err) {
      console.error(err)
      return
    }
    exec("cpabe-enc pub_key dossier.txt 'patient'", (error, stdout, stderr) => {
      if (error) {
          console.log(`error: ${error.message}`);
          return;
      }
      
      if (stderr) {
          console.log(`stderr: ${stderr}`);
          
          return;
      } 
      let readablestream = fs.createReadStream("dossier.txt.cpabe");
      readablestream.on('readable', () => {
      let result = readablestream.read();
      if (result) {
        ipfs.files.add(result, function(err, files) {
          if (err) {
            res.json('err');
            console.log(err);
          }
          truffle_connect.setUserDossier(req.session.user_id,files[0]["hash"],'patient',(balance) => {
            console.log(files);
            res.send(balance)
          });
        });
      }
      });
    });
  })
});

app.get('/g', (req, res) => {
  truffle_connect.GetUserDossier(0,0,(result) => {
    //const file = fs.createWriteStream("dossier_0.txt.cpabe");
    console.log(result)
    res.send(result)
    /*https.get("https://ipfs.infura.io/ipfs/"+result[1], function(response) {
      response.pipe(file);      
    });*/
   
  });
  /*exec("cpabe-keygen -o dossier_0_private_key pub_key master_key patient", (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        
        return;
    }
    

});
exec("cpabe-dec pub_key dossier_0_private_key  dossier_0.txt.cpabe", (error, stdout, stderr) => {
  if (error) {
      console.log(`error: ${error.message}`);
      res.send("error cpabe-dec" )

      return;
  }
  if (stderr) {
      console.log(`stderr: ${stderr}`);
      
      return;
  }
  res.send("dossier_0")

  });*/

});

app.get('/a', (req, res) => {
  truffle_connect.getUsers((result) => {
    console.log(result)
    res.send(result)
  });
});
app.get('/AddAttribut/:attr', (req, res) => {
  truffle_connect.addAttrubut(req.session.user_id,req.params.attr,(result) => {
    console.log(result)
    res.send(result)
  });
});
app.get('/GetAttribut', (req, res) => {
  truffle_connect.GetAttrubut(req.session.user_id,(result) => {
    var list=[];
    for(var i=0;i<result.length;i++){
      if(result[i]!="")
      list.push(result[i])
    }
    res.send(list)
  });
});
app.listen(port, () => {
  truffle_connect.web3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:7545"));
  console.log("Express Listening at http://localhost:" + port);
});
